[% out.setContentType("Java"); %]
[* Need parameters in the run configuration: 
simName to specify the simulator name
fuzzFileName gives the fuzzing definition file *]
package fuzzingengine.spec;

import java.util.Optional;
import atlasdsl.Mission;

import fuzzingengine.*;
import fuzzingengine.operationparamsinfo.*;

public class GeneratedFuzzingSpec {

	public static FuzzingEngine createFuzzingEngine(Mission m, boolean loadCSV) {
	FuzzingEngine fe = new FuzzingEngine(m);
	FuzzingSimMapping simMapping = new FuzzingSimMapping();
	
	[%
	for (gv in GrammarVariable.allInstances()) {
		TemplateFactory.setOutputRoot("../middleware-java/");
		var t : Template = TemplateFactory.load("genGrammarVariableTemplate.egl");
		var templateFile = "src/fuzzexperiment/runner/jmetal/grammar/variables/" + gv.className + ".java";
		t.populate("variableTemplateClassName", gv.className);	
		t.generate(templateFile);
	}
	%]
	
	[%
	TemplateFactory.setOutputRoot("../middleware-java/");
	var t : Template = TemplateFactory.load("genGrammarVariableList.egl");
	var templateFile = "src/middleware/core/SetupMiddlewareFunctionVars.java";
	t.generate(templateFile);
	%]
	
	[* Need to generate the file SetupMiddlewareFunctionVars from the grammar variable list! *]
	try {
	
	[% 	var opsNum = 0;
		var opParamNum = 0;
		var oppLookup = new Map();
	 %]
	
	[* Operations and parameter sets *]
	[% for (ops in OperationParameterSet.allInstances()) { %]
	[% opsNum++;
	   var opsJavaName = "ops" + opsNum; 
	   var opClassName = ops.parent.operationClassName;
	   oppLookup.put(ops, opsJavaName);
	%]
	   OperationParameterSet [%= opsJavaName %] = new OperationParameterSet("[%= ops.name %]", "[%= opClassName %]");
	   [* Add operation params for this param set *] 
	   [% for (opparam in ops.params) { %]
	   		[%  opParamNum++; 
	   			var opParamName = "opp" + opParamNum; %]
	   		[* TODO: add list parameter types here *]
	   		[% if (opparam.isKindOf(StringConstantOperationParameter)) { %] 
	   			OperationParameter [%= opParamName %] = new StringConstantOperationParameter("[%= opparam.name %]", "[%= opparam.value %]");
	   		[% } %]
	   			
	   		[% if (opparam.isKindOf(DoubleRangeOperationParameter)) { %] 
	   			OperationParameter [%= opParamName %] = new DoubleRangeOperationParameter("[%= opparam.name %]", [%= opparam.lower %], [%= opparam.upper %]);
	   		[% } %]
	   		
	   		[% if (opparam.isKindOf(DoubleConstantOperationParameter)) { %] 
	   			OperationParameter [%= opParamName %] = new DoubleConstantOperationParameter("[%= opparam.name %]", [%= opparam.value %]);
	   		[% } %]
	   		
	   		[% if (opparam.isKindOf(IntConstantOperationParameter)) { %] 
	   			OperationParameter [%= opParamName %] = new IntConstantOperationParameter("[%= opparam.name %]", [%= opparam.value %]);
	   		[% } %]
	   		
	   		[% if (opparam.isKindOf(IntRangeOperationParameter)) { %] 
	   			OperationParameter [%= opParamName %] = new IntRangeOperationParameter("[%= opparam.name %]", [%= opparam.lower %], [%= opparam.upper %]);
	   		[% } %]
	   		[%= opsJavaName %].addParameter([%= opParamName %]);
	   [% } %]
	[% } %]
	
[% for (s in FuzzSpec!Simulator.allInstances()) { %]
	[% if (s.name == simName) { %]
	[% var baseDir = s.baseDirectory; %]
	
		[% for (launchscript in s.launchers) { %]
			[% var launchPath = baseDir + "/" + launchscript.path; %]
				simMapping.addLaunchFilePath("[%= launchPath %]");
		[% } %]
	
	
		[% for (comp in s.components) { %]
		[% var cnature = "FuzzingSimMapping.FuzzingNature.NO_MODIFICATIONS";
		   var classstring = "Optional.empty()";
	   	   var crelpathstr = "Optional.empty()";
	   	   var isEnv = false; 

	   	   
	   	   %]
		[% 	if (comp.nature.isKindOf(BinaryFuzzing)) {
				cnature = "FuzzingSimMapping.FuzzingNature.BINARY";
				classstring = "Optional.empty()";
				crelpathstr = "Optional.of(\"" + baseDir + "/" + comp.componentRelativePath + "\")";
			} 
		%]
		
		[% if (comp.isKindOf(Environment)) {
			isEnv = true;
		} %]
		
		
		
	simMapping.setComponentFuzzingInfo("[%= comp.name %]", [%= cnature %], [%= classstring %], [%= crelpathstr %], [%= isEnv %]);
		
	[% for (vspec in comp.vars) { %]
		[% 
			var c = comp;
			//var vt = vspec.vtype; 
			var typename = "Optional.empty()";
			var timespec = "Optional.empty()";
			var fuzzProb = "Optional.empty()";
			
			typename = "Optional.of(\"" + vspec.simType + "\")";
			
			if (vspec.timeLimit != null) {
				timespec = "Optional.of(new TimeSpec(m," + vspec.timeLimit.startTime + "," + vspec.timeLimit.endTime + "))";
			}
			
			if (vspec.probInfo != null) {
				fuzzProb = "Optional.of(" + vspec.probInfo.includeVariableProbability + ")"; 
			}
		%]
				
		simMapping.addRecord("[%= c.name %]", "[%= vspec.variable %]", "[%= vspec.reflectionName %]", 
		FuzzingSimMapping.VariableDirection.[%= vspec.dir %], Optional.of("[%= baseDir %]/[%= c.componentRelativePath %]"), [%= typename %],
		[%= vspec.isVehicleSpecific %], [%= timespec %], [%= fuzzProb %]);
	
		[% for (oppreft in vspec.opParamsType) { %]
			[% var oppref = oppreft.opParam; 
		   	var opJavaName = oppLookup.get(oppref); %]
			simMapping.addOperationParameterSetForVariable("[%= vspec.variable %]", [%= opJavaName %], "[%= oppreft.subSpec %]");
		[% } %]
	
	[% } %]
	[% } %]
	[% } %]
	[% } %]
	
	[* Add simulator message variables *]
	[% for (msg in FuzzSpec!FuzzingMessage.allInstances()) { %]
		[% var mref = msg.messageRef;
		   var mname = mref.name; %]	
		[% for (vspec in msg.vars) { %]
			[% var c = vspec.component; 
			   var cname;
			   var crelpathstr;
			   var primedName;
			   var origName = vspec.variable;
			%]
			[% if (c.isDefined()) {
				cname = c.name;
				crelpathstr = "Optional.of(" + c.componentRelativePath + ")";
			} else {
				cname = "NULL-" + mname;
				crelpathstr = "Optional.empty()";
			}
			 %]
			 
            [* We assume that the primed name is automatically computed by adding the 
            character to the end, ignoring reflectionName, e.g. X -> X'. This is because later in 
            FuzzingEngine.addFuzzingMessageOperation we assume X' is the name of the given simmapping key *]
		 	[% primedName = origName + "'";
			   var vt = vspec.vtype; %]
	
	[* The primed name is FIRST, since it is received by pShare at the recipient as the altered name *]
	simMapping.addRecord("[%= cname %]", "[%= primedName %]", "[%= origName %]", 
	FuzzingSimMapping.VariableDirection.[%= vspec.dir %], [%= crelpathstr %],
	[% if (vt.isKindOf(RegexpVariableType)) { %]
		Optional.of("[%= vt.regexp %]")
	[% } else { %]
		Optional.empty()
	[% } %]
	);

		[% } %]
	[% } %]

	} catch (InvalidTimeSpec its) {
			System.out.println("InvalidTimeSpec - " + its.getNature());
			its.printStackTrace();
	}
	
	fe.setSimMapping(simMapping);
	if (loadCSV) {
		fe.setupFromFuzzingFile("[%= fuzzFileName %]", m);
	}
	return fe;
	}
}